name: Veeva Data Quality System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC for maintenance
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  VEEVA_ENV: ci

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatter check
        run: |
          black --check --diff python/ tests/ setup.py

      - name: Run isort import sorting check
        run: |
          isort --check-only --diff python/ tests/ setup.py

      - name: Run flake8 linting
        run: |
          flake8 python/ tests/ setup.py --max-line-length=88 --extend-ignore=E203,W503

      - name: Run mypy type checking
        run: |
          mypy python/ --ignore-missing-imports --no-strict-optional

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create test database directory
        run: |
          mkdir -p data/database

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=python --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
        env:
          VEEVA_DB_PATH: data/database/test_veeva_opendata.db

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          pip install -r requirements.txt

      - name: Run safety check for known vulnerabilities
        run: |
          safety check --json

      - name: Run bandit security linting
        run: |
          bandit -r python/ -f json -o bandit-report.json || true

      - name: Upload bandit report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bandit-security-report
          path: bandit-report.json

  build-and-test-docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f deploy/Dockerfile -t veeva-dq:test .

      - name: Test Docker image
        run: |
          # Test that the image runs and has correct entrypoint
          docker run --rm veeva-dq:test python --version
          
          # Test that application starts
          docker run --rm veeva-dq:test python python/main.py --help

      - name: Test Docker Compose setup
        run: |
          cd deploy
          cp environments/.env.dev .env
          docker-compose config
          docker-compose up -d --build
          sleep 10
          docker-compose ps
          docker-compose logs
          docker-compose down

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark memory-profiler

      - name: Run performance tests
        run: |
          pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment logic here
          # This could be Docker deployment, cloud deployment, etc.
          echo "url=https://staging.veeva-dq.example.com" >> $GITHUB_OUTPUT

      - name: Run staging health check
        run: |
          echo "Running health checks on staging environment"
          # Add health check logic here

      - name: Notify Slack on staging deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Staging deployment ${{ job.status }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create production backup
        run: |
          echo "Creating production backup before deployment"
          # Add backup logic here

      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment"
          # Add your production deployment logic here
          echo "url=https://veeva-dq.example.com" >> $GITHUB_OUTPUT

      - name: Run production health check
        run: |
          echo "Running health checks on production environment"
          # Add comprehensive health check logic here
          sleep 30  # Wait for deployment to stabilize

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback"
          # Add rollback logic here

      - name: Notify team on production deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Production deployment ${{ job.status }} for commit ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    name: Cleanup and Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Running scheduled maintenance and cleanup"
          # Add cleanup logic for old backups, logs, etc.

      - name: Generate system report
        run: |
          echo "Generating daily system health report"
          # Add reporting logic